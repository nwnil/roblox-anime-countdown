"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"8f1208eb5ee9\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXJtYW5cXERvd25sb2Fkc1xccm9ibG94LWFuaW1lLWNvdW50ZG93blxcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjhmMTIwOGViNWVlOVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/supabase-service.ts":
/*!*********************************!*\
  !*** ./lib/supabase-service.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appGameToDbGame: () => (/* binding */ appGameToDbGame),\n/* harmony export */   authService: () => (/* binding */ authService),\n/* harmony export */   dbGameToAppGame: () => (/* binding */ dbGameToAppGame),\n/* harmony export */   gameService: () => (/* binding */ gameService),\n/* harmony export */   notificationService: () => (/* binding */ notificationService),\n/* harmony export */   userService: () => (/* binding */ userService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\n// Game-related functions\nconst gameService = {\n    // Get all games\n    async getAllGames () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').select('*').order('release_date', {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get games by status\n    async getGamesByStatus (status) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').select('*').eq('status', status).order('release_date', {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get games by anime style\n    async getGamesByAnimeStyle (animeStyle) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').select('*').eq('anime_style', animeStyle).order('release_date', {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Add a new game (admin function)\n    async addGame (game) {\n        console.log('Supabase addGame called with:', game);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').insert([\n            game\n        ]).select().single();\n        if (error) {\n            console.error('Supabase error details:', {\n                message: error.message,\n                details: error.details,\n                hint: error.hint,\n                code: error.code\n            });\n            throw error;\n        }\n        console.log('Game successfully added:', data);\n        return data;\n    },\n    // Update game\n    async updateGame (id, updates) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').update(updates).eq('id', id).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Delete game\n    async deleteGame (id) {\n        try {\n            console.log('Starting deletion process for game:', id);\n            // First, get the game data to access file URLs - select all columns we might need\n            const { data: gameData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').select('*').eq('id', id).single();\n            if (fetchError) {\n                console.error('Error fetching game data for deletion:', fetchError);\n                // If we can't fetch the game, it might not exist, but continue with the deletion attempt\n                if (fetchError.code === 'PGRST116') {\n                    console.log('Game not found, it may have already been deleted');\n                    return; // Game doesn't exist, consider it already deleted\n                }\n            }\n            console.log('Game data for deletion:', gameData);\n            // Collect all file URLs to delete from storage\n            const filesToDelete = [];\n            if (gameData) {\n                // Add main files - check all possible column names that might exist\n                const possibleFileColumns = [\n                    'icon_url',\n                    'image_url',\n                    'thumbnail_url',\n                    'trailer_url',\n                    'primary_video_url'\n                ];\n                for (const column of possibleFileColumns){\n                    if (gameData[column] && typeof gameData[column] === 'string') {\n                        filesToDelete.push(gameData[column]);\n                    }\n                }\n                // Add media files from media_urls array (if it exists)\n                if (gameData.media_urls && Array.isArray(gameData.media_urls)) {\n                    filesToDelete.push(...gameData.media_urls.filter((url)=>url && typeof url === 'string'));\n                }\n            }\n            console.log('Files to delete from storage:', filesToDelete.length, filesToDelete);\n            // Delete files from storage with improved error handling\n            for (const fileUrl of filesToDelete){\n                if (fileUrl && typeof fileUrl === 'string' && fileUrl.trim()) {\n                    try {\n                        let bucket = '';\n                        let fileName = '';\n                        // Handle different URL formats\n                        if (fileUrl.includes('/storage/v1/object/public/')) {\n                            // Supabase public URL format\n                            const urlParts = fileUrl.split('/storage/v1/object/public/');\n                            if (urlParts.length > 1) {\n                                const pathParts = urlParts[1].split('/');\n                                bucket = pathParts[0];\n                                fileName = pathParts.slice(1).join('/');\n                            }\n                        } else if (fileUrl.includes('supabase')) {\n                            // Try to extract from other possible URL formats\n                            const matches = fileUrl.match(/\\/([^\\/]+)\\/([^\\/]+\\.(jpg|jpeg|png|gif|webp|mp4|webm|ogg|mov|avi|mkv))$/i);\n                            if (matches) {\n                                bucket = matches[1];\n                                fileName = matches[2];\n                            }\n                        }\n                        if (bucket && fileName) {\n                            console.log(\"Attempting to delete file: \".concat(fileName, \" from bucket: \").concat(bucket));\n                            const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(bucket).remove([\n                                fileName\n                            ]);\n                            if (deleteError) {\n                                console.error(\"Error deleting file \".concat(fileName, \" from bucket \").concat(bucket, \":\"), deleteError);\n                            // Continue with other deletions even if one fails\n                            } else {\n                                console.log(\"✅ Successfully deleted: \".concat(fileName, \" from \").concat(bucket));\n                            }\n                        } else {\n                            console.warn(\"Could not parse file URL for deletion: \".concat(fileUrl));\n                        }\n                    } catch (storageError) {\n                        console.error('Error processing file URL for deletion:', fileUrl, storageError);\n                    // Continue with other deletions\n                    }\n                }\n            }\n            // Delete the game record from database\n            console.log('Deleting game record from database...');\n            const { error: dbError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('games').delete().eq('id', id);\n            if (dbError) {\n                console.error('Error deleting game from database:', dbError);\n                throw dbError;\n            }\n            console.log('✅ Game deletion completed successfully');\n        } catch (error) {\n            console.error('❌ Error in deleteGame:', error);\n            throw error;\n        }\n    }\n};\n// User notification functions\nconst notificationService = {\n    // Get user's notification preferences for all games\n    async getUserNotifications (userId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_game_notifications').select('*').eq('user_id', userId).eq('is_enabled', true);\n        if (error) throw error;\n        return data || [];\n    },\n    // Toggle notification for a game\n    async toggleGameNotification (userId, gameId) {\n        // First check if notification exists\n        const { data: existing } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_game_notifications').select('*').eq('user_id', userId).eq('game_id', gameId).single();\n        if (existing) {\n            // Update existing notification\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_game_notifications').update({\n                is_enabled: !existing.is_enabled\n            }).eq('user_id', userId).eq('game_id', gameId);\n            if (error) throw error;\n            return !existing.is_enabled;\n        } else {\n            // Create new notification\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_game_notifications').insert([\n                {\n                    user_id: userId,\n                    game_id: gameId,\n                    notification_type: 'release_date',\n                    is_enabled: true\n                }\n            ]);\n            if (error) throw error;\n            return true;\n        }\n    },\n    // Get notification status for a specific game\n    async getGameNotificationStatus (userId, gameId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_game_notifications').select('is_enabled').eq('user_id', userId).eq('game_id', gameId).single();\n        if (error) return false;\n        return (data === null || data === void 0 ? void 0 : data.is_enabled) || false;\n    }\n};\n// User profile functions\nconst userService = {\n    // Get user profile\n    async getProfile (userId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_profiles').select('*').eq('id', userId).single();\n        if (error) return null;\n        return data;\n    },\n    // Create or update user profile\n    async upsertProfile (profile) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_profiles').upsert([\n            profile\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Get user preferences\n    async getPreferences (userId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_preferences').select('*').eq('user_id', userId).single();\n        if (error) return null;\n        return data;\n    },\n    // Update user preferences\n    async updatePreferences (userId, preferences) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_preferences').upsert([\n            {\n                ...preferences,\n                user_id: userId\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    }\n};\n// Authentication functions\nconst authService = {\n    // Get current user\n    async getCurrentUser () {\n        const { data: { user }, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (error) throw error;\n        return user;\n    },\n    // Sign up with email\n    async signUp (email, password) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signUp({\n            email,\n            password\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Sign in with email\n    async signIn (email, password) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Sign out\n    async signOut () {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signOut();\n        if (error) throw error;\n    },\n    // Listen to auth changes\n    onAuthStateChange (callback) {\n        return _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.onAuthStateChange(callback);\n    }\n};\n// Utility function to convert DB game to app Game type\nfunction dbGameToAppGame(dbGame) {\n    // Map database status to app status\n    const statusMap = {\n        'upcoming': 'Upcoming',\n        'released': 'Upcoming',\n        'delayed': 'Delayed',\n        'cancelled': 'TBA',\n        'tba': 'TBA',\n        'alpha_testing': 'Alpha Testing',\n        'beta_testing': 'Beta Testing'\n    };\n    var _dbGame_has_exact_date;\n    return {\n        id: dbGame.id,\n        title: dbGame.title,\n        developer: dbGame.developer,\n        description: dbGame.description || '',\n        releaseDate: dbGame.release_date || '',\n        hasExactDate: (_dbGame_has_exact_date = dbGame.has_exact_date) !== null && _dbGame_has_exact_date !== void 0 ? _dbGame_has_exact_date : true,\n        approximateReleaseText: dbGame.approximate_release_text || '',\n        animeStyle: dbGame.anime_style || '',\n        genre: dbGame.genre || '',\n        thumbnail: dbGame.image_url || '',\n        icon: dbGame.icon_url || undefined,\n        videoUrl: dbGame.trailer_url || '',\n        status: statusMap[dbGame.status] || 'TBA',\n        links: dbGame.links || undefined,\n        images: dbGame.media_urls || [],\n        youtube_videos: dbGame.youtube_videos || [],\n        tags: [],\n        robloxGameId: '',\n        earlyAccessDate: '',\n        features: [],\n        platforms: [\n            'Roblox'\n        ],\n        notifications: {\n            enabled: true,\n            discord: true,\n            email: true\n        }\n    };\n}\n// Utility function to convert app Game to DB game format\nfunction appGameToDbGame(appGame) {\n    // Map app status to database status\n    const statusMap = {\n        'Alpha Testing': 'alpha_testing',\n        'Beta Testing': 'beta_testing',\n        'Upcoming': 'upcoming',\n        'TBA': 'tba',\n        'Delayed': 'delayed'\n    };\n    var _appGame_hasExactDate;\n    return {\n        title: appGame.title || '',\n        developer: appGame.developer || '',\n        description: appGame.description || null,\n        release_date: appGame.releaseDate || null,\n        has_exact_date: (_appGame_hasExactDate = appGame.hasExactDate) !== null && _appGame_hasExactDate !== void 0 ? _appGame_hasExactDate : true,\n        approximate_release_text: appGame.approximateReleaseText || null,\n        anime_style: appGame.animeStyle || null,\n        genre: appGame.genre || null,\n        image_url: appGame.thumbnail || null,\n        icon_url: appGame.icon || null,\n        trailer_url: appGame.videoUrl || null,\n        media_urls: appGame.images || null,\n        youtube_videos: appGame.youtube_videos || null,\n        anticipation_level: 5,\n        status: statusMap[appGame.status || 'TBA'] || 'tba',\n        links: appGame.links || null\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase-service.ts\n"));

/***/ })

});